🦖 Dino Run – FPGA-Based Real-Time Game

Dino Run is a real-time, VGA-rendered game implemented in SystemVerilog and deployed on the Basys3 FPGA Board. This project highlights expertise 
in digital design, finite state machines (FSMs), and hardware-software integration.

📌 Overview
	• Designed and implemented a hardware-accelerated game inspired by the classic Dino Run.
	• Utilized finite state machines to manage gameplay states such as title screen, running, collision, and reset.
	• Rendered game visuals (dino, obstacles, score) in real-time using VGA output.
	• Integrated hardware controls via Basys3 pushbuttons for user interaction (jump, duck, reset).

🛠️ Key Contributions
	1.Finite State Machine (FSM) Design
		• Implemented a modular FSM for game state transitions, ensuring smooth gameplay flow.
		• States included TITLE_SCREEN, RUNNING, COLLISION, and RESET.
	2. Random Obstacle Generation
		• Developed a 16-bit Linear Feedback Shift Register (LFSR) to pseudo-randomly spawn obstacles with varying attributes (height, type).
	3. VGA Graphics Rendering
		• Designed a VGA timing generator to synchronize the display at 640x480 resolution.
		• Rendered animated sprites (dino, obstacles, ground) and a dynamic score counter.
	4. Hardware Integration
		• Programmed the Basys3 FPGA to handle user inputs for gameplay via pushbuttons.
		• Incorporated a 7-segment display driver for real-time score display.
	5. Verification and Deployment
		• Verified module functionality using comprehensive SystemVerilog testbenches.
		• Synthesized the design and programmed it onto the Basys3 FPGA for demonstration.

🚀 Technical Details
	• Language: SystemVerilog
	• Tools: Xilinx Vivado Design Suite
	• Hardware: Basys3 FPGA (Xilinx Artix-7), VGA-compatible display

Key Features:
	• Random obstacle generation using LFSR.
	• VGA-rendered game visuals with real-time updates.
	• Robust state management with a clean FSM architecture.
	• Modular design for independent testing and simulation.

🎓 Skills Demonstrated
	• FPGA Design: Proficient in designing, simulating, and synthesizing SystemVerilog modules.
	• Digital Logic Design: Developed FSMs, VGA controllers, and LFSR-based randomness.
	• Hardware-Software Integration: Delivered a functional game system with user input and real-time rendering.

📁 Project Structure   	       # all the files I worked on
	
dinorun/
├── rtl/                       # SystemVerilog RTL files
│   ├── dinorun_pkg.sv         # State definitions
│   ├── dinorun.sv             # Top-level Dino Run module
│   ├── lfsr16.sv              # 16-bit LFSR RNG
│   ├── vga_timer.sv           # VGA Timer
│   ├── objects/               # Game objects
│   │   ├── title.sv
│   │   └── cactus.sv
│   └── basys3/
│       ├── basys3_7seg_driver.sv
│       └── hex7seg.sv
├── synth/                     # Basys3 constraints
│   └── Basys3_Master.xdc
├── sim/                       # Testbenches
└── README.md                  # Project documentation

🔄 State Machine
    [*] --> TITLE_SCREEN
    TITLE_SCREEN --> RUNNING : start_i
    RUNNING --> COLLISION : Collision Detected
    COLLISION --> TITLE_SCREEN : Reset (up_i or down_i)
    COLLISION --> RUNNING : start_i

States
	1. TITLE_SCREEN: Display title. Await start_i signal. User can make the dino jump and duck while waiting 
                         for start_i.
	2. RUNNING: Dino moves, obstacles spawn and move from right to left of screen, and score increases. The
                    player remains in PLAYING until a dino pixel hits an object pixel.
	3. HIT: Dino flashes for 1 second; game stops and all objects freeze.
	4. RESET: Return to TITLE_SCREEN after reset signals.
